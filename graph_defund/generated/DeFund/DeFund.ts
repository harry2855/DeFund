// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddProject extends ethereum.Event {
  get params(): AddProject__Params {
    return new AddProject__Params(this);
  }
}

export class AddProject__Params {
  _event: AddProject;

  constructor(event: AddProject) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _project(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FundedProject extends ethereum.Event {
  get params(): FundedProject__Params {
    return new FundedProject__Params(this);
  }
}

export class FundedProject__Params {
  _event: FundedProject;

  constructor(event: FundedProject) {
    this._event = event;
  }

  get funder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get maker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _project(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get erc20ContractAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class DeFund extends ethereum.SmartContract {
  static bind(address: Address): DeFund {
    return new DeFund("DeFund", address);
  }

  project_ID(): BigInt {
    let result = super.call("project_ID", "project_ID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_project_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("project_ID", "project_ID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  project_active(param0: BigInt): Address {
    let result = super.call(
      "project_active",
      "project_active(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_project_active(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "project_active",
      "project_active(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  project_funded(param0: BigInt): Address {
    let result = super.call(
      "project_funded",
      "project_funded(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_project_funded(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "project_funded",
      "project_funded(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class Add_projectCall extends ethereum.Call {
  get inputs(): Add_projectCall__Inputs {
    return new Add_projectCall__Inputs(this);
  }

  get outputs(): Add_projectCall__Outputs {
    return new Add_projectCall__Outputs(this);
  }
}

export class Add_projectCall__Inputs {
  _call: Add_projectCall;

  constructor(call: Add_projectCall) {
    this._call = call;
  }
}

export class Add_projectCall__Outputs {
  _call: Add_projectCall;

  constructor(call: Add_projectCall) {
    this._call = call;
  }
}

export class Give_fundingCall extends ethereum.Call {
  get inputs(): Give_fundingCall__Inputs {
    return new Give_fundingCall__Inputs(this);
  }

  get outputs(): Give_fundingCall__Outputs {
    return new Give_fundingCall__Outputs(this);
  }
}

export class Give_fundingCall__Inputs {
  _call: Give_fundingCall;

  constructor(call: Give_fundingCall) {
    this._call = call;
  }

  get Project(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get erc20(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Give_fundingCall__Outputs {
  _call: Give_fundingCall;

  constructor(call: Give_fundingCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
